{
 "setcommandasfunction": "convert a command to a function where function is defined as subcoroutine that will not execute if there's a second command, for example: addCommandAsFunction len, sin, atan ...",
 "scope": "create a scope with FSCMD Command where defined data is ${_code}, ${_arg}, ${_splitarg} and ${_commasplit}",
 "pyscope": "create a scope with Python Command where defined data is _code, _arg, _splitarg, and _commasplit",
 "void": "create a command with scope method in fscmd language",
 "pyvoid": "create a command with scope method in python language",
 "access": "access python variable, if not defined raise exception",
 "license": "get license information about this software or project",
 "do": "execute the given argument and replace '\\n' to '\n'",
 "typeof": "return data type for the given argument",
 "if": "if statement will execute if the given argument is true, scoped command",
 "new": "create a new or replace existing command with argument: new <new-command>, <existing-command>. You can add --replace to make the <existing-command> replaced by <new-command>",
 "local": "scoped code, list, or dictionary will get stored in %{local} section",
 "raise": "raise an exception",
 "cd": "change directory",
 "end": "end is a command to end local scope, given argument will make '\\n' of command replaced with _arg",
 "vars": "show variables (int, str, list, unite)",
 "labels": "show all labels including builtin label",
 "pyload": "python load (import method, function in python module (usually for pydef or pyexec))",
 "pyexec": "python execution (execute script with exec() command)",
 "pydef": "create a command with python language, like: pydef help, help()",
 "list": "list command, make a list of word with argument: list ${name}, ${ordered-data}. accessed with index and ordered. each ordered-data is a command or function. and please notice the separator is ','. you can get list index using DATA[INDEX_AS_INTEGER]. for example: ranks -> [3, 4, 5], ranks[1] <- will return 3",
 "unite": "unite command, make a unite of word with argument: unite ${name}, ${data}. set can't be accessed with index and unordered. each data is a command or function. and please notice the separator is ','",
 "load": "import/load file from based-module folder, ex: load loop, math, regex. special statement is *, .",
 "import": "import/load from current folder/directory, ex: import files.fcm. special statement is *, .",
 "write": "write a file with argument write <file>, <content>",
 "float": "float data type (friend of integer), example: float a, 1.3 (set a to 1.3)",
 "label": "create a label, based label is end, start",
 "input": "read user input with argument: input <prompt> and return it with value \"ret\"",
 "goto": "goto command, reverse command line to which label or line to go",
 "int": "integer command that set a new integer memory with argument: int <memory>, <value>",
 "str": "string command that set a new string memory with argument: str <memory>, <value>",
 "run": "run a file",
 "read": "read and return value to $ret, expected argument is read <file>, but you can add --return and --show",
 "exit": "exit, if the argument is given then return status",
 "prompt": "change cursor/prompt in $Console",
 "del": "delete a file by parameter del <file>",
 "pass": "pass",
 "dir": "show current directory",
 "description": "make command, method or function describable",
 "for": "for loop with argument: ${iteration_data}, ${command}",
 "def": "define command statement with argument: def command-name, ${command}",
 "exec": "execute command where command is returned value of argument, example: exec input rpl: // RPL Method",
 "eval": "evaluate and execute where command is the argument and the argument is returned, for example: eval putchar, input Your Name is",
 "dict": "create a dictionary, with argument: dict ${variable}, ${var (command/function)}:${val (command/function)}, ... and you can get it by using command 'getvalue', for example: dict Dictionary-To-Random, 'random':'Ransom', 'python':'pyrun'. if we use getvalue Dictionary-To-Random, random. the return value is ransom. and please notice the separator is ','. you can get value using DATA{KEY_AS_COMMAND}. for example name = {'Faran': 1, 'Arif': 0.5}, name{'Faran'} <- will return 1",
 "locals": "show all defined `local` name",
 "bool": "create an element if a value is whether true or false if neither return null, with argument: bool ${data}, ${value}",
 "wait": "wait/pause console few second, where the argument is the `second` of time to pause the console",
 "while": "looping if, with argument: ${data}, if you want to access more loop command, try load loop module (all command is not using scoped method)",
 "try": "try and catch exception/error with data (_error, _exception, <argument in catch>). note that you should create a catch first then do the 'try' command",
 "catch": "execute command if there was an exception/error in the 'try' scope command. note that you should use this first, then do the try command",
 "set_stdout": "redirect stdout to given argument (command)",
 "set_stdin": "redirect stdin to given argument (command)",
 "openf": "open file with the given argument and return it to 'ret', standard opening is 'a+'",
 "tuple": "create a tuple with argument: tuple ${variable}, {command1}, {command2}, ...",
}
